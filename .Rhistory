shiny::runApp()
length(input$yVar)
runApp()
lapply(1:length(input$yVar), function(i) {
plotname <- paste("plot", i, sep="")
plotOutput(ns(plotname))
})
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame("summary_stat" = c("min", "max", "median", "mean", "25 pc", "75 pc"),
"xVar" = c(min(plot_data$x_var),
max(plot_data$x_var),
median(plot_data$x_var),
mean(plot_data$x_var),
mean(plot_data$x_var),
mean(plot_data$x_var)),
"yVar" = c(min(plot_data$y_var),
max(plot_data$y_var),
median(plot_data$y_var),
mean(plot_data$y_var),
mean(plot_data$y_var),
mean(plot_data$y_var))) %>%
round(2) %>% setNames(c("Metric", xVar, yVar))
runApp()
runApp()
data.frame("summary_stat" = c("min", "max", "median", "mean", "25 pc", "75 pc"),
"xVar" = c(min(plot_data$x_var),
max(plot_data$x_var),
median(plot_data$x_var),
mean(plot_data$x_var),
mean(plot_data$x_var),
mean(plot_data$x_var)) %>% round(2),
"yVar" = c(min(plot_data$y_var),
max(plot_data$y_var),
median(plot_data$y_var),
mean(plot_data$y_var),
mean(plot_data$y_var),
mean(plot_data$y_var)) %>% round(2)) %>%
setNames(c("Metric", xVar, yVar))
c(min(plot_data$x_var),
max(plot_data$x_var),
median(plot_data$x_var),
mean(plot_data$x_var),
mean(plot_data$x_var),
mean(plot_data$x_var)) %>% round(2)
plot_data$x_var
plot_data$x_var %>% is.numeric()
runApp()
?DT::datatable
runApp()
runApp()
?geom_smooth
shiny::runApp()
ggplot(data = plot_data, aes(x = x_var, y = y_var)) +
geom_col() +
geom_smooth(formula = y ~ poly(x, 2)) +
xlab(input$xVar) +
ylab(yVar)
ggplot(data = plot_data, aes(x = x_var, y = y_var)) +
geom_col() +
geom_smooth(formula = y ~ poly(x, 2)) +
xlab(input$xVar) +
ylab(yVar)
ggplot(data = plot_data, aes(x = x_var, y = y_var)) +
geom_col() +
geom_smooth(formula = y ~ x) +
xlab(input$xVar) +
ylab(yVar))
ggplot(data = plot_data, aes(x = x_var, y = y_var)) +
geom_col() +
geom_smooth(formula = y ~ x) +
xlab(input$xVar) +
ylab(yVar)
runApp()
runApp()
runApp()
install.packages("Kendall")
install.packages("Kendall")
library(Kendall)
?maxKendall
?MaxKendall
?MannKendall
runApp()
MannKendall(plot_data$y_var)
runApp()
runApp()
runApp()
MannKendall(plot_data$y_var)
MannKendall(plot_data$y_var) -> a
a$tau
y_kendall <- MannKendall(plot_data$y_var)
y_kendall$tau
y_kendall$sl
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
?geom_smooth
runApp()
View(facet_wrap_data)
View(plot_data)
facet_wrap_data <- summary_data[,c(x_var, facet_var)] %>% setNames(c("x_var", "facet_var"))
View(facet_wrap_data)
facet_wrap_data %>% count(x_var, facet_var)
facet_wrap_data %>% group_by(x_var) %>% count(facet_var) %>% top_n()
facet_wrap_data %>% group_by("x_var") %>% count("facet_var") %>% top_n()
facet_wrap_data %>% group_by("x_var") %>% count("facet_var")
facet_wrap_data %>% group_by(x_var) %>% count(facet_var)
facet_wrap_data %>% count(x_var, facet_var) %>% arrange(n)
?arrange
facet_wrap_data %>% count(x_var, facet_var) %>% arrange(desc(n)) %>% summarise(facet_var = facet_var[1])
facet_wrap_data %>% count(x_var, facet_var) %>% arrange(desc(n)) %>% group_by(x_var) %>% summarise(facet_var = facet_var[1])
facet_wrap_data <- summary_data[,c(x_var, facet_var)] %>% setNames(c("x_var", "facet_var"))
function(plot_data, summary_data, facet_var, x_var){
facet_wrap_data <- summary_data[,c(x_var, facet_var)] %>% setNames(c("x_var", "facet_var"))
facet_wrap_data <- facet_wrap_data %>% count(x_var, facet_var) %>% slice(which.max(n)) %>% select(-n)
browser()
}
facet_wrap_data <- facet_wrap_data %>%
count(x_var, facet_var) %>%
arrange(desc(n)) %>%
group_by(x_var) %>%
summarise(facet_var = facet_var[1])
merge(plot_data, facet_wrap_data, by = "x_var")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(plot_data)
View(plot_data)
summary_data
summary_data %>% View()
append_facet_var_data_for_plot_data(plot_data, summary_data, input$facetVar, input$xVar)
input$facetVar
summary_data %>% select(input$xVar, input$facetVar)
runApp()
facet_wrap_data <- facet_wrap_data %>%
count(x_var, facet_var) %>%
arrange(desc(n)) %>%
group_by(x_var) %>%
summarise(facet_var = facet_var[1])
merge(plot_data, facet_wrap_data, by = "x_var")
runApp()
runApp()
?shiny::runApp
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
plot_data
y_kendall <- MannKendall(plot_data$y_var)
c
?str_glue
??str_glue
??strcapture
??str_c
runApp()
runApp()
db_con <- dbConnect(RPostgres::Postgres(), dbname = "postgres", host="platypus-wetlands-db.ckzvcjercc61.ap-southeast-2.rds.amazonaws.com", port=5432, user="mohsin", password="RC345aLaxxuAJ")
library(DBI)
db_con <- dbConnect(RPostgres::Postgres(), dbname = "postgres", host="platypus-wetlands-db.ckzvcjercc61.ap-southeast-2.rds.amazonaws.com", port=5432, user="mohsin", password="RC345aLaxxuAJ")
dbListTables(db_con)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(plot_data)
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?textInput
runApp()
ramasar_db_df <- DBI::dbGetQuery(db_con, paste0("select * from v_ramasar_summary where ramsarid='", input$ramasarId,"'"))
ramasar_db_df <- DBI::dbGetQuery(db_con, paste0('select * from "v_ramasar_summary" where ramsarid=', "'", input$ramasarId,"'"))
ramasar_db_df <- DBI::dbGetQuery(db_con, paste0('select * from "v_ramsar_summary" where ramsarid=', "'", input$ramasarId,"'"))
hybas_db_df <- DBI::dbGetQuery(db_con, paste0("select * from v_hybas_lvl5_summary where ramsarid='", input$ramasarId,"'"))
wdpa_db_df <- DBI::dbGetQuery(db_con, paste0("select * from v_wdpa_summary where ramsarid='", input$ramasarId,"'"))
df_list <- list(ramasar_db_df, wdpa_db_df)
WDPA.Ramsar.DBDat.Filter <- df_list %>% reduce(inner_join,  by=c("ramsarid", "Year"))
??reduce
?Reduce
dplyr::reduce
df_list %>% purr::reduce(inner_join,  by=c("ramsarid", "Year"))
df_list %>% purrr::reduce(inner_join,  by=c("ramsarid", "Year"))
WDPA.Ramsar.DBDat.Filter <- df_list %>% purrr::reduce(inner_join,  by=c("ramsarid", "Year"))
WDPA.Ramsar.DBDat.Filter.Summary <-  WDPA.Ramsar.DBDat.Filter %>%
dplyr::group_by(Year,ramsarid) %>%
summarise(Maximum.Water.Area.km2 = max(Maximum.Water.Area.km2..x,Maximum.Water.Area.km2..y),
Average.Water.Area.km2 = max(Average.Water.Area.km2..x,Average.Water.Area.km2..y),
Moisture.Index = max(Moisture.Index.x,Moisture.Index.y),
Vegetation.Index = max(Vegetation.Index.x,Vegetation.Index.y),
Annual.Precipitation = max(Annual.Precipitation.x,Annual.Precipitation.y))
WDPA.Ramsar.DBDat.Filter.Summary <-  WDPA.Ramsar.DBDat.Filter %>%
dplyr::group_by(Year,ramsarid) %>%
summarise(Maximum.Water.Area.km2 = max(`Maximum Water Area(km2).x`,`Maximum Water Area(km2).y`),
Average.Water.Area.km2 = max(`Average Water Area(km2).x`,`Average Water Area(km2).y`),
Moisture.Index = max(`Moisture Index.x`, `Moisture Index.y`),
Vegetation.Index = max(`Vegetation Index.x`, `Vegetation Index.y`),
Annual.Precipitation = max(`Annual Precipitation.x`, `Annual Precipitation.y`))
colnames(Hybas.DBDat.Filter) <- c("ramsarid","Ramsar.Name","Year","Annual.Precipitation.Hybas5","Palmer.Drought.Hybas5","Runoff.Hybas5")
df_list <- list(DATAOBJS$summary_data, WDPA.Ramsar.DBDat.Filter.Summary, hybas_db_df)
Merged <- df_list %>% reduce(inner_join,  by=c("ramsarid", "Year"))
colnames(Hybas.DBDat.Filter) <- c("ramsarid","Ramsar.Name","Year","Annual.Precipitation.Hybas5","Palmer.Drought.Hybas5","Runoff.Hybas5")
df_list <- list(DATAOBJS$summary_data, WDPA.Ramsar.DBDat.Filter.Summary, hybas_db_df)
Merged <- df_list %>% purrr::reduce(inner_join,  by=c("ramsarid", "Year"))
colnames(Hybas.DBDat.Filter) <- c("ramsarid","Ramsar.Name","Year","Annual.Precipitation.Hybas5","Palmer.Drought.Hybas5","Runoff.Hybas5")
colnames(hybas_db_df) <- c("ramsarid","Ramsar.Name","Year","Annual.Precipitation.Hybas5","Palmer.Drought.Hybas5","Runoff.Hybas5")
df_list <- list(DATAOBJS$summary_data, WDPA.Ramsar.DBDat.Filter.Summary, hybas_db_df)
Merged <- df_list %>% purrr::reduce(inner_join,  by=c("ramsarid", "Year"))
shiny::runApp()
DATAOBJS$summary_data
df_list <- list(DATAOBJS$summary_data %>% mutate(ramsarid=input$ramasarId, Year=WaterYear), WDPA.Ramsar.DBDat.Filter.Summary, hybas_db_df)
Merged <- df_list %>% purrr::reduce(inner_join,  by=c("ramsarid", "Year"))
df_list <- list(DATAOBJS$summary_data %>% mutate(ramsarid=as.numeric(input$ramasarId), Year=WaterYear), WDPA.Ramsar.DBDat.Filter.Summary, hybas_db_df)
Merged <- df_list %>% purrr::reduce(inner_join,  by=c("ramsarid", "Year"))
runApp()
runApp()
DATAOBJS$summary_data %>% colnames()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
summary_data
runApp()
summary_data
runApp()
shiny::runApp()
runApp()
runApp()
input$yVar
runApp()
runApp()
runApp()
input$yVar
runApp()
input$yVar
input$yVar == ""
input$yVar == ""
runApp()
runApp()
input$yVar
runApp()
yVar <- input$yVar
plot_data <- summary_data %>% get_summarised_data_for_plotting(input$xVar, yVar, input$plotMetric)
selected_df <- summary_data[,c(input$xVar, yVar)] %>% setNames(c("x_var", "y_var"))
summary_stats_plot_data <- get_summary_statistics_plot_data(selected_df, input$xVar, yVar)
input$xVar
yVar
runApp()
runApp()
yVar <- input$yVar
plot_data <- summary_data %>% get_summarised_data_for_plotting(input$xVar, yVar, input$plotMetric)
selected_df <- summary_data[,c(input$xVar, yVar)] %>% setNames(c("x_var", "y_var"))
summary_stats_plot_data <- get_summary_statistics_plot_data(selected_df, input$xVar, yVar)
is.numeric(plot_data$y_var)
y_kendall <- list(tau = NA, sl = NA)
summary_df <- data.frame("summary_stat" = c("min", "max", "median", "mean", "25 pc", "75 pc", "Kendall stat", "Kendall p val"),
"yVar" = c(min(plot_data$y_var, na.rm = T),
max(plot_data$y_var, na.rm = T),
median(plot_data$y_var, na.rm = T),
mean(plot_data$y_var, na.rm = T),
quantile(plot_data$y_var, 0.25, na.rm = T),
quantile(plot_data$y_var, 0.75, na.rm = T),
y_kendall$tau,
y_kendall$sl) %>% round(2)) %>%
setNames(c("Metric", yVar))
runApp()
plot_data$y_var
runApp()
DATAOBJS$summary_data
DATAOBJS$summary_data %>% is.numeric()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.numeric(plot_data$y_var)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
?infoBox
?box
runApp()
runApp()
?text
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
input$ambientVar
input$ambientVar
input$ambientVar
input$ambientVar -> a
shiny::runApp()
runApp()
?so.call
?do.call
?min
runApp()
runApp()
runApp()
data_df[[year_col]]
summarised_df <- plyr::ddply(data_df, data_df[[year_col]], function(df){
year_data_vec <- df[[row_input_data$indicator]]
browser()
do.call(summary_func, year_data_vec, na.rm = T)
})
summarised_df <- plyr::ddply(data_df, data_df[[year_col]], function(df){
browser()
year_data_vec <- df[[row_input_data$indicator]]
do.call(summary_func, year_data_vec, na.rm = T)
})
summarised_df <- plyr::ddply(data_df, year_col, function(df){
browser()
year_data_vec <- df[[row_input_data$indicator]]
do.call(summary_func, year_data_vec, na.rm = T)
})
year_data_vec <- df[[row_input_data$indicator]]
summary_func
do.call(summary_func, year_data_vec, na.rm = T)
do.call(summary_func, list(year_data_vec, na.rm = T))
runApp()
summarised_df
current_year
summarised_df$rank <- rank(summarised_df$V1)
summarised_df$rank
runApp()
shiny::runApp()
runApp()
